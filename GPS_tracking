#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>

#define RXPin 16
#define TXPin 17

static const uint32_t GPSBaud = 9600;

////////////////////////////////////////////////////////////////////////////////////
char* ssid = "ThepokKung_reset"; //Wifi Name
char* password = "thepokkung"; //Wifi Password
////////////////////////////////////////////////////////////////////////////////////
//MQTT connected
//Test server
const char* mqttServer = "broker.mqttdashboard.com";
const int mqttPort = 1883;
const char* mqttUser = "";
const char* mqttPassword = "";
char mqtt_name_id[] = "";

WiFiClient client;
PubSubClient mqtt(client);
TinyGPSPlus gps;
HardwareSerial ss(2);

//Json
////////////////////////////////////////////////////
StaticJsonDocument<256> doc;
char buffer[256];
////////////////////////////////////////////////////

void setupwifi() {
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());;
}

void callback (char* topic, byte* payload, unsigned int length) {
  deserializeJson(doc, payload, length);
  size_t n = serializeJson(doc, buffer);
  ///////////////////////////////////////////////////////////////////////////////////////////////
  if (mqtt.connect("ntnode/sensors/", mqttUser, mqttPassword)) {
    if (mqtt.publish("ntnode/sensors/", buffer, n) == true) {
      Serial.println("publish Valve status success");

    } else {
      Serial.println("publish Fail");
    }
  } else {
    Serial.println("Connect Fail MQTT");
  }
}

void reconnect_mqtt() {
  while (!mqtt.connected()) {
    unsigned long currentMillis = millis();
    unsigned long previousMillis = 0;
    unsigned long interval = 30000;
    // if WiFi is down, try reconnecting every CHECK_WIFI_TIME seconds
    if ((WiFi.status() != WL_CONNECTED) && (currentMillis - previousMillis >= interval)) {
      Serial.print(millis());
      Serial.println("Reconnecting to WiFi...");
      WiFi.disconnect();
      WiFi.reconnect();
      previousMillis = currentMillis;
    }
    Serial.print("Attempting MQTT connection...");
    //WiFi.reconnect();
    if (mqtt.connect(mqtt_name_id, mqttUser, mqttPassword)) {
      Serial.println("connected");
      // Subscribe or resubscribe to a topic
      // You can subscribe to more topics (to control more LEDs in this example)
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqtt.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  ss.begin(GPSBaud, SERIAL_8N1, RXPin, TXPin, false);
  Serial.println(TinyGPSPlus::libraryVersion());
  setupwifi();
  mqtt.setServer(mqttServer, mqttPort); //Login MQTT
  mqtt.setCallback(callback);

}

void loop() {
  /*
    if (!mqtt.connected()) {
    Serial.println("---Reconnect MQTT ---");
    reconnect_mqtt();
    }
    mqtt.loop();

    if (ss.available() > 0) {
    if (gps.encode(ss.read())) {
      Serial.print(F("Location: "));
      if (gps.location.isValid())
      {
        Serial.print(gps.location.lat(), 6);
        Serial.print(F(","));
        Serial.print(gps.location.lng(), 6);
      }
      else
      {
        Serial.print(F("INVALID"));
      }
      Serial.println();
    }
    }
    if (millis() > 5000 && gps.charsProcessed() < 10)
    {
    Serial.println(F("No GPS detected: check wiring."));
    while (true);
    }

    doc["deviceid"] = "gps tracking";
    doc["latitude"] = (gps.location.lat(), 6);
    doc["longitude"] = (gps.location.lng(), 6);

    size_t n = serializeJson(doc, buffer);

    if (mqtt.connect(mqtt_name_id, mqttUser, mqttPassword)) {
    Serial.println("\nConnected MQTT: ");
    if (mqtt.publish("ntnode/sensors/", buffer , n) == true) {
      Serial.println("publish success");
    } else {
      Serial.println("publish Fail");
    }
    } else {
    Serial.println("Connect Fail MQTT");
    }
    Serial.println("=============");

    delay(1000);
  */

  if (!mqtt.connected()) {
    Serial.println("---Reconnect MQTT ---");
    reconnect_mqtt();
  }
  mqtt.loop();

  while (ss.available() > 0)
    if (gps.encode(ss.read()))
      displayInfo();

  if (millis() > 5000 && gps.charsProcessed() < 10)
  {
    Serial.println(F("No GPS detected: check wiring."));
    while (true);
  }
  delay(1000);
}

void displayInfo()
{
  Serial.print(F("Location: "));
  if (gps.location.isValid())
  {
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(","));
    Serial.print(gps.location.lng(), 6);
  }
  else
  {
    Serial.print(F("INVALID"));
  }
  doc["deviceid"] = "gps tracking";
  doc["latitude"] = gps.location.lat();
  doc["longitude"] = gps.location.lng();

  size_t n = serializeJson(doc, buffer);

  if (mqtt.connect(mqtt_name_id, mqttUser, mqttPassword)) {
    Serial.println("\nConnected MQTT: ");
    if (mqtt.publish("ntnode/sensors/", buffer , n) == true) {
      Serial.println("publish success");
    } else {
      Serial.println("publish Fail");
    }
  } else {
    Serial.println("Connect Fail MQTT");
  }
  Serial.println("=============");

  Serial.println();
}
